import React, { Component } from 'react';

import classes from './App.css';
import Person from './Person/Person';
// Now this is a different way of importing classes from the CSS file which is now supported by the underlying build script because of the tweaks we just made in config file.
// What this will do is it will import all the classes we export from App.css as properties on this object (classes).

console.log(classes);
// {
//   App: "App__App__3Ge-C",
//   red: "App__red__eyQdf",
//   bold: "App__bold__1gKsH",
//   Red: "App__Red__1gVyX"
// }

// The CSS module feature enable the build process to simply detect this kind of import from a CSS file and understands that we don't just want
// to add the CSS as it is but instead it now looks into the CSS file and transforms every classname there
// to a random unique one and returns us a map of these generated unique class names mapped to the class names we chose in the css file.

// So every class name we have in the CSS file is now a property of this imported object (classes) and the value for every property will be
// this randomly generated unique class name generated by this package.

// Then the build process attaches these unique classes inside head under a style tag.
// Every component can have its own unique specific classes under a seperate style tag.
// This way Styles are scoped to components
// This way classes are not imported globally and unwanted styles are not applied.
/* 
  <style type="text/css">
  .App__App__3Ge-C {
    text-align: center;
  }
  
  .App__red__eyQdf {
    color: red;
  }
  
  .App__bold__1gKsH {
    font-weight: bold;
  }
  
  .App__App__3Ge-C button {
    background-color: green;
    color: white;
    font: inherit;
    border: 1px solid blue;
    padding: 8px;
    cursor: pointer;
  }
  
  .App__App__3Ge-C button:hover {
    background-color: lightgreen;
    color: black;
  }
  
  .App__App__3Ge-C button.App__Red__1gVyX {
    background-color: red;
  }
  
  .App__App__3Ge-C button.App__Red__1gVyX:hover {
    background-color: salmon;
  }
  </style>
  <style type="text/css">
  .Person__Person__17ToL {
    width: 60%;
    margin: 16px auto;
    border: 1px solid #eee;
    -webkit-box-shadow: 0 2px 3px #ccc;
            box-shadow: 0 2px 3px #ccc;
    padding: 16px;
    text-align: center;
  }
  
  @media (min-width: 500px) {
    .Person__Person__17ToL {
      width: 450px;
    }
  }
  </style> 
*/


class App extends Component {
  state = {
    persons: [
      { id: 'asfa1', name: 'Max', age: 28 },
      { id: 'vasdf1', name: 'Manu', age: 29 },
      { id: 'asdf11', name: 'Stephanie', age: 26 }
    ],
    otherState: 'some other value',
    showPersons: false
  };

  nameChangedHandler = (event, id) => {
    const personIndex = this.state.persons.findIndex(p => {
      return p.id === id;
    });

    const person = {
      ...this.state.persons[personIndex]
    };

    // const person = Object.assign({}, this.state.persons[personIndex]);

    person.name = event.target.value;

    const persons = [...this.state.persons];
    persons[personIndex] = person;

    this.setState({ persons: persons });
  };

  deletePersonHandler = personIndex => {
    // const persons = this.state.persons.slice();
    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({ persons: persons });
  };

  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({ showPersons: !doesShow });
  };

  render() {
    let persons = null;
    let btnClass = '';

    if (this.state.showPersons) {
      persons = (
        <div>
          {this.state.persons.map((person, index) => {
            return (
              <Person
                click={() => this.deletePersonHandler(index)}
                name={person.name}
                age={person.age}
                key={person.id}
                changed={event => this.nameChangedHandler(event, person.id)}
              />
            );
          })}
        </div>
      );

      btnClass = classes.Red;
    }

    const assignedClasses = [];
    if (this.state.persons.length <= 2) {
      assignedClasses.push(classes.red); // classes = ['red']
    }
    if (this.state.persons.length <= 1) {
      assignedClasses.push(classes.bold); // classes = ['red', 'bold']
    }

    return (
      <div className={classes.App}>
        <h1>Hi, I'm a React App</h1>
        <p className={assignedClasses.join(' ')}>This is really working!</p>
        <button className={btnClass} onClick={this.togglePersonsHandler}>
          Toggle Persons
        </button>
        {persons}
      </div>
    );
    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));
  }
}

export default App;
